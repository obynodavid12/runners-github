name: "Terraform-Apply"

# Controls when the workflow will run
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

    
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }} 
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: $ {{ secrets.AWS_REGION }}
    defaults:
      run:
        working-directory: "."   
    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1    
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        #cli_config_credentials_hostname: ${{ secrets.TF_HOSTNAME}}
        terraform_wrapper: false

    
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init
      
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

          
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'push'
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform Plan Status 
      if: steps.plan.outcome == 'failure'
      run: exit 1
                  
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master'
      run: terraform apply -auto-approve
                
                
    - name: Save Terraform Output
      run: terraform output -json > tfoutput.json
      shell: bash

    - name: Upload output file
      uses: actions/upload-artifact@v2
      with:
        name: terraform-output
        path: |
           tfoutput.json
           "script/*"
      

    # - name: Terraform destroy
    #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    #   id: destroy
    #   run: terraform destroy -auto-approve
  
  
  build:
    name: 'docker-image'
    runs-on: ubuntu-latest
    
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
   
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" 
    
  

  Deploy:
    needs: [terraform, build ]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "."     
    steps:
   
    - name: Download terraform output file
      uses: actions/download-artifact@v2
      with:
        name: terraform-output

   
    - name: Print the ip addresses
      shell: bash
      run: |
        value=`cat tfoutput.json`
        echo The result is $value
        echo "INSTANCE_IP=`jq -r '.private_ip.value' tfoutput.json`" >> $GITHUB_ENV
    
    
    - name: copy file via ssh key
      uses: appleboy/scp-action@master
      env:
       host: ${{ env.INSTANCE_IP }}
       key: ${{ secrets.AWS_EC2_PUBLIC_KEY }}
      with:
        host: ${{ secrets.INSTANCE_IP }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_PRIVATE_KEY }} 
        proxy_host: ${{ secrets.AWS_PROXY_HOST }}
        proxy_username: ${{ secrets.AWS_EC2_USERNAME }}
        proxy_key: ${{ secrets.AWS_EC2_PROXY_PRIVATE_KEY }}
        rm: true
        strip_components: 1
        source: "runners-github/script/*"
        target: "${{ secrets.TARGET_DIR }}"
            
    
    - name: executing remote ssh commands
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.INSTANCE_IP }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_PRIVATE_KEY }} 
        proxy_host: ${{ secrets.AWS_PROXY_HOST }}
        proxy_username: ${{ secrets.AWS_EC2_USERNAME }}
        proxy_key: ${{ secrets.AWS_EC2_PROXY_PRIVATE_KEY }}
        command_timeout: 30m
        script: |
            cd script
            find ./ -name "*.sh" -execdir chmod u+x {} +  
            ./bootstrap.sh
            docker login --username AWS --password-stdin $ECR_REGISTRY
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker run --name github-runner -e GITHUB_OWNER=obynodavid12 -e GITHUB_REPOSITORY=runners-github -e PERSONAL_ACCESS_TOKEN={{ secret.PERSONAL_ACCESS_TOKEN }} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
