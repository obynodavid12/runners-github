name: "Terraform-Apply"

# Controls when the workflow will run
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

    
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      RUNNER_CFG_PAT: ${{ secrets.RUNNER_CFG_PAT }} 
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
   
    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1    
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        #cli_config_credentials_hostname: ${{ secrets.TF_HOSTNAME}}
        terraform_wrapper: false

    
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init
      
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

          
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'push'
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform Plan Status 
      if: steps.plan.outcome == 'failure'
      run: exit 1
                  
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master'
      run: terraform apply -auto-approve
                
                
    - name: Save Terraform Output
      run: terraform output -json > tfoutput.json
      shell: bash

    - name: Upload output file
      uses: actions/upload-artifact@v2
      with:
        name: terraform-output
        path: |
           tfoutput.json
           scripts/
      

    - name: Terraform destroy
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      id: destroy
      run: terraform destroy -auto-approve
 

  Deploy:
    needs: terraform
    runs-on: ubuntu-latest
         
    steps:
    - name: Download terraform output file
      uses: actions/download-artifact@v2
      with:
        name: terraform-output
      
    - name: Print the ip addresses
      shell: bash
      run: |
        value=`cat tfoutput.json`
        echo The result is $value
        echo "INSTANCE_IP=`jq -r '.private_ip.value' tfoutput.json`" >> $GITHUB_ENV
        #echo "BASTION_INSTANCE_IP=`jq -r '.public_ip' tfoutput.json`" >> $GITHUB_ENV
        
    
    - name: copy file via ssh key
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.INSTANCE_IP }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_PRIVATE_KEY }} 
        proxy_host: ${{ secrets.AWS_PROXY_HOST }}
        proxy_username: ${{ secrets.AWS_EC2_USERNAME }}
        proxy_key: ${{ secrets.AWS_EC2_PROXY_PRIVATE_KEY }}
        rm: true
        strip_components: 1
        source: "scripts"
        target: "scripts"          
            
    
    - name: executing remote ssh commands
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.INSTANCE_IP }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_PRIVATE_KEY }} 
        proxy_host: ${{ secrets.AWS_PROXY_HOST }}
        proxy_username: ${{ secrets.AWS_EC2_USERNAME }}
        proxy_key: ${{ secrets.AWS_EC2_PROXY_PRIVATE_KEY }}
        command_timeout: 30m
        script: |
          cd scripts/
          find ./ -name "*.sh" -execdir chmod u+x {} +
          sudo yum update -y
          wget -O jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          chmod +x ./jq
          sudo mv jq /usr/bin
          export RUNNER_CFG_PAT=${{ secrets.RUNNER_CFG_PAT }} 
          ./createsvc.sh obynodavid12/Instances
#          #curl -s https://raw.githubusercontent.com/actions/runner/main/scripts/create-latest-svc.sh | bash -s obynodavid12/Instances -n selfhosted         
          
          
      
